/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : PomodoroViewController.sm
 */

#import "PomodoroViewController.h"
#import "PomodoroViewController_sm.h"
// Class declarations.
@implementation PomodoroFSM
+ (PomodoroFSM_Suspended*)Suspended;
{
    static PomodoroFSM_Suspended *gPomodoroFSM_Suspended = nil;
    if (!gPomodoroFSM_Suspended)
    {
        gPomodoroFSM_Suspended = [[PomodoroFSM_Suspended alloc] initWithName:@"PomodoroFSM::Suspended" stateId:0];
    }
    return gPomodoroFSM_Suspended;
}

+ (PomodoroFSM_Running*)Running;
{
    static PomodoroFSM_Running *gPomodoroFSM_Running = nil;
    if (!gPomodoroFSM_Running)
    {
        gPomodoroFSM_Running = [[PomodoroFSM_Running alloc] initWithName:@"PomodoroFSM::Running" stateId:1];
    }
    return gPomodoroFSM_Running;
}

+ (PomodoroFSM_Done*)Done;
{
    static PomodoroFSM_Done *gPomodoroFSM_Done = nil;
    if (!gPomodoroFSM_Done)
    {
        gPomodoroFSM_Done = [[PomodoroFSM_Done alloc] initWithName:@"PomodoroFSM::Done" stateId:2];
    }
    return gPomodoroFSM_Done;
}

+ (PomodoroFSM_Break*)Break;
{
    static PomodoroFSM_Break *gPomodoroFSM_Break = nil;
    if (!gPomodoroFSM_Break)
    {
        gPomodoroFSM_Break = [[PomodoroFSM_Break alloc] initWithName:@"PomodoroFSM::Break" stateId:3];
    }
    return gPomodoroFSM_Break;
}

@end

@implementation PomodoroViewControllerState
- (void)Entry:(PomodoroViewControllerContext*)context
{
}
- (void)Exit:(PomodoroViewControllerContext*)context
{
}
- (void)pressPomodoro:(PomodoroViewControllerContext*)context;
{
    [self Default:context];
}
- (void)timeOut:(PomodoroViewControllerContext*)context;
{
    [self Default:context];
}

- (void)Default:(PomodoroViewControllerContext*)context;
{
    NSAssert( NO, @"Default transition" );
}
@end


@implementation PomodoroFSM_Default
@end
@implementation PomodoroFSM_Suspended
- (void)Entry:(PomodoroViewControllerContext*)context;

{
    PomodoroViewController *ctxt = [context owner];

    [ctxt pomodoroGray];
    [ctxt welcome];
}

- (void)pressPomodoro:(PomodoroViewControllerContext*)context;
{
    [[context state] Exit:context];
    [context setState:[PomodoroFSM Running]];
    [[context state] Entry:context];
}
@end

@implementation PomodoroFSM_Running
- (void)Entry:(PomodoroViewControllerContext*)context;

{
    PomodoroViewController *ctxt = [context owner];

    [ctxt pomodoroRed];
    [ctxt startTimer:25];
}
- (void)Exit:(PomodoroViewControllerContext*)context;

{
    PomodoroViewController *ctxt = [context owner];

    [ctxt stopTimer];
}

- (void)pressPomodoro:(PomodoroViewControllerContext*)context;
{
    [[context state] Exit:context];
    [context setState:[PomodoroFSM Suspended]];
    [[context state] Entry:context];
}

- (void)timeOut:(PomodoroViewControllerContext*)context;
{
    [[context state] Exit:context];
    [context setState:[PomodoroFSM Done]];
    [[context state] Entry:context];
}
@end

@implementation PomodoroFSM_Done
- (void)Entry:(PomodoroViewControllerContext*)context;

{
    PomodoroViewController *ctxt = [context owner];

    [ctxt ring];
    [ctxt pomodoroGray];
    [ctxt wellDone];
}

- (void)pressPomodoro:(PomodoroViewControllerContext*)context;
{
    [[context state] Exit:context];
    [context setState:[PomodoroFSM Break]];
    [[context state] Entry:context];
}
@end

@implementation PomodoroFSM_Break
- (void)Entry:(PomodoroViewControllerContext*)context;

{
    PomodoroViewController *ctxt = [context owner];

    [ctxt pomodoroGreen];
    [ctxt startTimer:5];
}
- (void)Exit:(PomodoroViewControllerContext*)context;

{
    PomodoroViewController *ctxt = [context owner];

    [ctxt ring];
    [ctxt stopTimer];
}

- (void)pressPomodoro:(PomodoroViewControllerContext*)context;
{
    [[context state] Exit:context];
    [context setState:[PomodoroFSM Suspended]];
    [[context state] Entry:context];
}

- (void)timeOut:(PomodoroViewControllerContext*)context;
{
    [[context state] Exit:context];
    [context setState:[PomodoroFSM Suspended]];
    [[context state] Entry:context];
}
@end

@implementation PomodoroViewControllerContext
- (id)initWithOwner:(PomodoroViewController*)owner;
{
    self = [super initWithState:[PomodoroFSM Suspended]];
    if (!self)
{
        return nil;
    }
    _owner = owner;
    return self;
}
- (id)initWithOwner:(PomodoroViewController*)owner state:(SMCState*)aState;
{
    self = [super initWithState: aState];
    if (!self)
{
        return nil;
    }
    _owner = owner;
    return self;
}
- (PomodoroViewControllerState*)state;
{
    return (PomodoroViewControllerState*)_state;
}
- (PomodoroViewController*)owner;
{
    return _owner;
}
- (void)enterStartState;
{
    [[self state] Entry:self];
}

- (void)pressPomodoro;
{
    [[self state] pressPomodoro:self];
}

- (void)timeOut;
{
    [[self state] timeOut:self];
}
@end

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
